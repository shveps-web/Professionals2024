##### INVENTARIZATION #####

  - name: Playbook for Inventarization
    hosts: all
    gather_facts: no
    tasks:


      - name: creating PC_INFO directory
        local_action:
          module: file
          path: /etc/ansible/playbooks/PC_INFO
          state: directory
            
      - name: creating NETWORK_INFO directory
        local_action:
          module: file
          path: /etc/ansible/playbooks/NETWORK_INFO
          state: directory

      - block: #WORKSTATIONS

          - name: output hostnames of workstations
            command: hostname
            register: remote_hostname_pc

          - name: creating output files for workstations
            local_action:
              module: file
              path: /etc/ansible/playbooks/PC_INFO/{{ remote_hostname_pc.stdout }}.yml
              state: touch

          - name: output VIM version
            command: vim --version
            register: vim_version
            failed_when: false

          - name: output Chromium version
            command: chromium --version
            register: chromium_version
            failed_when: false

          - name: write VIM version to inventoryzation file
            lineinfile:
              path: /etc/ansible/playbooks/PC_INFO/{{ remote_hostname_pc.stdout }}.yml
              line: "[VIM VERSION]: {{ vim_version.stdout_lines[0].split(' ')[4] }}"
            delegate_to: localhost
            when: vim_version.rc == 0

          - name: write VIM version to inventoryzation file (when VIM NOT INSTALLED)
            lineinfile:
              path: /etc/ansible/playbooks/PC_INFO/{{ remote_hostname_pc.stdout }}.yml
              line: "[VIM VERSION]: PROGRAMM NOT INSTALLED"
            delegate_to: localhost
            when: vim_version.rc != 0

          - name: write Chromium version to inventoryzation file
            lineinfile:
              path: /etc/ansible/playbooks/PC_INFO/{{ remote_hostname_pc.stdout }}.yml
              line: "[CHROMIUM VERSION]: {{ chromium_version.stdout }}"
            delegate_to: localhost
            when: vim_version.rc == 0

          - name: write Chromium version to inventoryzation file (when CHROMIUM NOT INSTALLED)
            lineinfile:
              path: /etc/ansible/playbooks/PC_INFO/{{ remote_hostname_pc.stdout }}.yml
              line: "[CHROMIUM VERSION]: PROGRAMM NOT INSTALLED"
            delegate_to: localhost
            when: vim_version.rc != 0

          - name: output IP-address from hosts
            lineinfile:
              path: /etc/ansible/playbooks/PC_INFO/{{ remote_hostname_pc.stdout }}.yml
              line: "[IP]: {{ ansible_host }}"
            delegate_to: localhost

        when: "'Workstations' in group_names"


      - block: #NETWORK DEVICES

          - block: #SWITCHES  

              - name: output hostnames of network switches
                command: hostname
                register: remote_hostname_switch

              - name: output Switch config
                shell: ovs-vsctl show | tee /tmp/ovs-config-{{ remote_hostname_switch.stdout }}.conf
                register: switch_config_output
                failed_when: false

              - name: save network device configuration (for Switch)
                fetch:
                  src: /tmp/ovs-config-{{ remote_hostname_switch.stdout }}.conf
                  dest: /etc/ansible/playbooks/NETWORK_INFO/ovs-config-{{ remote_hostname_switch.stdout }}.conf
                  flat: yes
                    
            when: "'Switch' in group_names"

          
          - block: #ROUTERS
        
              - name: output config network rtr's
                ansible.netcommon.cli_command:
                  command: show running-config
                register: output_config_rtr

              - name: output date
                command: 'date +%Y-%m-%d'
                register: date_state

              - name: create rtr configs backups
                shell: | 
                  echo '{{ output_config_rtr.stdout }}' >> /etc/ansible/playbooks/NETWORK_INFO/{{ date_state.stdout }}.conf

            when: "'Router' in group_names"

        when: "'Network' in group_names" 


          



